// @ts-check
/* eslint-disable @typescript-eslint/no-require-imports */

const { resolve } = require("path");
const crawl = require("./crawl.cjs");
const { readFileSync, writeFileSync } = require("fs");

const BUILD_DIRECTORY = resolve(__dirname, "../../build");
/** @type { import("terser").MinifyOptions } */
const TERSER_OPTIONS = {
  compress: {
    booleans_as_integers: true,
    ecma: 2020,
    keep_fargs: false,
    passes: 2,
    unsafe: true,
  },
  mangle: {
    reserved: ["BASIS"],
  },
  format: {
    comments: false,
    indent_level: 0,
  },
};
/** @type { import("html-minifier-terser").Options } */
const HTML_TERSER_OPTIONS = {
  collapseBooleanAttributes: true,
  collapseInlineTagWhitespace: true,
  collapseWhitespace: true,
  includeAutoGeneratedTags: false,
  minifyCSS: true,
  minifyJS: true,
  minifyURLs: true,
  noNewlinesBeforeTagClose: true,
  removeAttributeQuotes: true,
  removeComments: true,
  removeRedundantAttributes: true,
  removeScriptTypeAttributes: true,
  removeStyleLinkTypeAttributes: true,
};

const { minify_sync: minifyJS } = require("terser");
const { minify: minifyHTML } = require("html-minifier-terser");

const JS_FILE_REGEX = /\.js$/;
const HTML_FILE_REGEX = /\.html$/;

const files = crawl(BUILD_DIRECTORY, "files", 1).filter(
  (file) => JS_FILE_REGEX.test(file) || HTML_FILE_REGEX.test(file)
);

(async () => {
  for (const file of files) {
    console.log(
      `[minify] | Minifying ${file.slice(BUILD_DIRECTORY.length + 1)}`
    );

    const fileContents = readFileSync(file, "utf-8");
    const minified = JS_FILE_REGEX.test(file)
      ? (minifyJS(fileContents, TERSER_OPTIONS).code ?? null)
      : await minifyHTML(fileContents, HTML_TERSER_OPTIONS);

    if (minified === null) {
      console.warn(`Could not minify file ${file}.`);
      continue;
    }

    writeFileSync(file, minified);
  }
})();
