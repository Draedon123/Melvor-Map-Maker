function x(){}const A=t=>t;function w(t,n){for(const o in n)t[o]=n[o];return t}function E(t){return t()}function B(){return Object.create(null)}function j(t){t.forEach(E)}function C(t){return"function"==typeof t}function D(t,n){return t!=t?n==n:t!==n||t&&"object"==typeof t||"function"==typeof t}let i,f;function F(t,n){return t===n?1:(i||(i=document.createElement("a")),i.href=n,t===i.href)}function P(t){return 0===Object.keys(t).length}function q(t,...n){if(null==t){for(const t of n)t(void 0);return x}const o=t.subscribe(...n);return o.unsubscribe?()=>o.unsubscribe():o}function S(t,n,o){t.$$.on_destroy.push(q(n,o))}function U(t,n,o,e){if(t){const r=y(t,n,o,e);return t[0](r)}}function y(t,n,o,e){return t[1]&&e?w(o.ctx.slice(),t[1](e(n))):o.ctx}function G(t,n,o,e){if(t[2]&&e){const r=t[2](e(o));if(void 0===n.dirty)return r;if("object"==typeof r){const t=[],o=Math.max(n.dirty.length,r.length);for(let e=0;e<o;e+=1)t[e]=n.dirty[e]|r[e];return t}return n.dirty|r}return n.dirty}function H(t,n,o,e,r,c){if(r){const s=y(n,o,e,c);t.p(s,r)}}function I(t){if(t.ctx.length>32){const n=[],o=t.ctx.length/32;for(let t=0;t<o;t++)n[t]=-1;return n}return-1}function J(t,n,o){return t.set(o),n}function h(t){f=t}function m(){if(!f)throw Error("Function called outside component initialization");return f}function K(t){m().$$.on_mount.push(t)}function L(t){m().$$.after_update.push(t)}function N(t,n){const o=t.$$.callbacks[n.type];o&&o.slice().forEach((t=>t.call(this,n)))}const a=[],g=[];let s=[];const p=[],k=Promise.resolve();let b=0;function v(){b||(b=1,k.then(z))}function Q(){return v(),k}function O(t){s.push(t)}function R(t){p.push(t)}const d=new Set;let o=0;function z(){if(0!==o)return;const t=f;do{try{for(;o<a.length;){const t=a[o];o++,h(t),M(t.$$)}}catch(t){throw a.length=0,o=0,t}for(h(null),a.length=0,o=0;g.length;)g.pop()();for(let t=0;t<s.length;t+=1){const n=s[t];d.has(n)||(d.add(n),n())}s.length=0}while(a.length);for(;p.length;)p.pop()();b=0,d.clear(),h(t)}function M(t){if(null!==t.fragment){t.update(),j(t.before_update);const n=t.dirty;t.dirty=[-1],t.fragment&&t.fragment.p(t.ctx,n),t.after_update.forEach(O)}}function T(t){const n=[],o=[];s.forEach((e=>-1===t.indexOf(e)?n.push(e):o.push(e))),o.forEach((t=>t())),s=n}export{w as A,A as B,R as C,N as D,D as a,F as b,U as c,G as d,g as e,L as f,I as g,S as h,C as i,B as j,z as k,P as l,O as m,x as n,K as o,T as p,f as q,j as r,q as s,Q as t,H as u,h as v,E as w,a as x,v as y,J as z};